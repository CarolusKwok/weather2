func = function(x){
if(rlang::is_symbol(x)){print("fuck")}
}
func(x = quote("hi"))
func(x = hi)
func = function(x){
expr = quo_squash(x)
if(rlang::is_symbol(x)){print("fuck")}
}
func(x = hi)
?quo_squash
func = function(x){
expr = rlang::quo_squash(x)
if(rlang::is_symbol(x)){print("fuck")}
}
func(x = hi)
func = function(x){
expr = rlang::quo_squash(x)
print(expr)
}
func(x = hi)
sys.help_sym2chr = function(value){
return(rlang::as_name(rlang::quo({{value}})))
}
sys.help_sym2chr(hi)
sys.help_sym2chr(hi, hi1)
sys.help_sym2chr = function(...){
return(rlang::as_name(rlang::quo({{...}})))
}
sys.help_sym2chr(hi, hi1)
sys.help_sym2chr = function(x){
return(rlang::as_name(rlang::quo({{x}})))
}
library(weather2)
weather2:::sys.help_sym2chr(x = hi)
weather2:::sys.help_sym2chr(x = yo)
weather2:::sys.help_sym2chr(x = "yo")
weather2:::sys.help_sym2chr(x = "lol")
sys.ck.data_col.exist = function(value, data, data_name, mode = "present", silent = F){
value = weather2:::sys.help_sym2chr(value)
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
return(T)
}
if(mode == "absent" & (value %in% colnames)){
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, data = tibble::tibble(x = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, data, data_name, mode = "present", silent = F){
value = weather2:::sys.help_sym2chr(value)
print(value)
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
return(T)
}
if(mode == "absent" & (value %in% colnames)){
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, data = tibble::tibble(x = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, data, data_name, mode = "present", silent = F){
value = weather2:::sys.help_sym2chr({{value}})
print(value)
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
return(T)
}
if(mode == "absent" & (value %in% colnames)){
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, data = tibble::tibble(x = 0), data_name = "hi")
sys.ck.data_col.exist(value = x, data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, value_name, data, data_name, mode = "present", silent = F){
value = weather2:::sys.help_sym2chr({{value}})
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must be present in {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
if(mode == "absent" & (value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must not be present in {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist(value = x, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, value_name, data, data_name, mode = "present", silent = F){
value = weather2:::sys.help_sym2chr({{value}})
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must be present in {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
if(mode == "absent" & (value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must not be present in {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
library(weather2)
sys.ck.data_col.exist = function(value, value_name, data, data_name, mode = "present", silent = F){
#Check ####
if(weather2:::sys.help_hasArg(value_name, value_name = "value_name")){return(T)}
if(weather2:::sys.help_hasArg(data_name, value_name = "data_name")){return(T)}
if(weather2:::sys.help_hasArg(value, value_name = {{value_name}})){return(T)}
if(weather2:::sys.help_hasArg(data, value_name = {{data_name}})){return(T)}
if(weather2::sys.ck.list_length(list = mode, list_name = "present", expected = 1)){return(T)}
if(weather2::sys.ck.list_item.in(list = mode, list_name = "mode", expected = c("present", "absent"))){return(T)}
if(weather2::sys.ck.class_logical(value = silent, value_name = "silent")){return(T)}
#Work ####
value = weather2:::sys.help_sym2chr({{value}})
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
if(mode == "absent" & (value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must not be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, value_name, data, data_name, mode = "present", silent = F){
#Check ####
if(weather2:::sys.help_hasArg(value_name, value_name = "value_name")){return(T)}
if(weather2:::sys.help_hasArg(data_name, value_name = "data_name")){return(T)}
if(weather2:::sys.help_hasArg(value, value_name = {{value_name}})){return(T)}
if(weather2:::sys.help_hasArg(data, value_name = {{data_name}})){return(T)}
if(weather2::sys.ck.list_length(list = mode, list_name = "present", expected = 1L)){return(T)}
if(weather2::sys.ck.list_item.in(list = mode, list_name = "mode", expected = c("present", "absent"))){return(T)}
if(weather2::sys.ck.class_logical(value = silent, value_name = "silent")){return(T)}
#Work ####
value = weather2:::sys.help_sym2chr({{value}})
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
if(mode == "absent" & (value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must not be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = x, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist(value = y, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist(value = fasflka, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, value_name, data, data_name, mode = "present", silent = F){
#Check ####
if(weather2:::sys.help_hasArg(value_name, value_name = "value_name")){return(T)}
if(weather2:::sys.help_hasArg(data_name, value_name = "data_name")){return(T)}
if(weather2:::sys.help_hasArg(value, value_name = {{value_name}})){return(T)}
if(weather2:::sys.help_hasArg(data, value_name = {{data_name}})){return(T)}
if(weather2::sys.ck.list_length(list = mode, list_name = "present", expected = 1L)){return(T)}
if(weather2::sys.ck.list_item.in(list = mode, list_name = "mode", expected = c("present", "absent"))){return(T)}
if(weather2::sys.ck.class_logical(value = silent, value_name = "silent")){return(T)}
#Work ####
value = weather2:::sys.help_sym2chr({{value}})
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'You supplied {.var {value}}',
"x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
if(mode == "absent" & (value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must not be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = fasflka, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist = function(value, value_name, data, data_name, mode = "present", silent = F){
#Check ####
if(weather2:::sys.help_hasArg(value_name, value_name = "value_name")){return(T)}
if(weather2:::sys.help_hasArg(data_name, value_name = "data_name")){return(T)}
if(weather2:::sys.help_hasArg(value, value_name = {{value_name}})){return(T)}
if(weather2:::sys.help_hasArg(data, value_name = {{data_name}})){return(T)}
if(weather2::sys.ck.list_length(list = mode, list_name = "present", expected = 1L)){return(T)}
if(weather2::sys.ck.list_item.in(list = mode, list_name = "mode", expected = c("present", "absent"))){return(T)}
if(weather2::sys.ck.class_logical(value = silent, value_name = "silent")){return(T)}
#Work ####
value = weather2:::sys.help_sym2chr({{value}})
colnames = colnames(data)
if(mode == "present" & !(value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'You supplied {.var {value}}',
"x" = 'Your column is not found in {.var {data_name}}!'))
}
return(T)
}
if(mode == "absent" & (value %in% colnames)){
if(!silent){
cli::cli_text('Error: column {.var {value_name}} must not be present in dataframe {.var {data_name}}')
cli::cli_bullets(c("x" = 'You supplied {.var {value}}',
"x" = 'Your column is found in {.var {data_name}}!'))
}
return(T)
}
return(F)
}
sys.ck.data_col.exist(value = fasflka, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi")
sys.ck.data_col.exist(value = fasflka, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi", mode = "absent")
sys.ck.data_col.exist(value = y, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi", mode = "absent")
sys.ck.data_col.exist(value = y, value_name = "x", data = tibble::tibble(y = 0), data_name = "hi", mode = "absent")
library(weather2)
?sys.ck.data_col.exist
usethis::use_r("sys_tool_data")
library(weather2)
hi = function(...){
print(hasArg(...))
}
hi(fuck)
hi(fuck = hi)
hi(fuck, hi)
library(weather2)
sys.ck.data_get.colname(x, data = tibble::tibble(x = 0))
library(weather2)
sys.tl.data_get.colname(x, data = tibble::tibble(x = 0))
library(weather2)
w2_check_col_exist
library(weather2)
usethis::use_r("sys_check_item")
sys.ck.item_numeric.value = function(list, list_name, expected, mode = "in", silent = F){
}
sys.ck.list_numeric.value = function(list, list_name, expected, mode = "in", silent = F){
}
sys.ck.list_numeric.value = function(list, list_name, expected, mode = "==", silent = F){
}
sys.ck.list_numeric.value()
sys.ck.list_numeric.value = function(list, list_name, expected, mode = "==", silent = F){
if(weather2::sys.ck.list_numericable(list, list_name = "list")){return(T)}
return(F)
}
sys.ck.list_numeric.value(c(1,2,3))
sys.ck.list_numeric.value(c(1,2,"a"))
weather2::sys.ck.class_numeric(value = 1L, value_name = "expected")
weather2::sys.ck.class_numeric(value = 1L, value_name = "expected")
weather2::sys.ck.class_numeric(value = 1L, value_name = "expected", silent = T)
class(1L)
class(1)
sys.ck.class_num.int = function(value, value_name, all = T, silent = F){
weather2::sys.ck.class(value = value,
value_name = value_name,
class = c("numeric", "integer"),
all = all,
silent = silent)
}
sys.ck.class_num.int(c(10, 20, 30L), "obj")
sys.ck.class_num.int(c(10, 20, 30L, "a"), "obj")
sys.ck.class_num.int(c(10, 20, 30L), "obj")
library(weather2)
sys.ck.class_num.int(list(10, 20, 30L), "obj")
sys.ck.class_num.int(list(10, 20, 30L, "a"), "obj")
list(10, 20, 30L, 40L)
list(10, 20, 30L, 40L) %>% class()
list(10, 20, 30L, 40L) %>% lapply(class)
c(1, 2, 3, 4) > 4
c(1, 2, 3, 4) >= 4
c(1, 2, 3, 4) >= 4L
sys.ck.list_numeric.value = function(list, list_name, expected, mode = "==", silent = F){
#Check ####
if(weather2:::sys.help_hasArg(value = list_name, value_name = "list_name")){return(T)}
if(weather2:::sys.help_hasArg(value = list, value_name = {{list_name}})){return(T)}
if(weather2:::sys.help_hasArg(value = expected, value_name = "expected")){return(T)}
if(weather2::sys.ck.list_numericable(list, list_name = "list")){return(T)}
if(weather2::sys.ck.class_num.int(value = expected, value_name = "expected")){return(T)}
if(weather2::sys.ck.list_length(list = expected, list_name = "expected", expected = 1L)){return(T)}
if(weather2::sys.ck.list_item.in(mode,list_name = "mode", expected = c("==", "!=", ">", "<", ">=", "<="))){return(T)}
if(weather2::sys.ck.class_logical(value = silent, value_name = "silent")){return(T)}
#Work ####
if(mode == "=="){
list_com = (list == expected)
if(sum(list_com) != length(lilist_comst)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == "!="){
list_com = (list != expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be not equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == ">"){
list_com = (list > expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be larger than {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == "<"){
list_com = (list < expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be smaller than {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == ">="){
list_com = (list >= expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be larger or equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == "<="){
list_com = (list <= expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be smaller or equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
return(F)
}
sys.ck.list_numeric.value(c(1,2,"a"))
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6), list_name = "obj", expected = 1, mode = "==")
sys.ck.list_numeric.value = function(list, list_name, expected, mode = "==", silent = F){
#Check ####
if(weather2:::sys.help_hasArg(value = list_name, value_name = "list_name")){return(T)}
if(weather2:::sys.help_hasArg(value = list, value_name = {{list_name}})){return(T)}
if(weather2:::sys.help_hasArg(value = expected, value_name = "expected")){return(T)}
if(weather2::sys.ck.list_numericable(list, list_name = "list")){return(T)}
if(weather2::sys.ck.class_num.int(value = expected, value_name = "expected")){return(T)}
if(weather2::sys.ck.list_length(list = expected, list_name = "expected", expected = 1L)){return(T)}
if(weather2::sys.ck.list_item.in(mode, list_name = "mode", expected = c("==", "!=", ">", "<", ">=", "<="))){return(T)}
if(weather2::sys.ck.class_logical(value = silent, value_name = "silent")){return(T)}
#Work ####
if(mode == "=="){
list_com = (list == expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == "!="){
list_com = (list != expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be not equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == ">"){
list_com = (list > expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be larger than {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == "<"){
list_com = (list < expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be smaller than {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == ">="){
list_com = (list >= expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be larger or equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
if(mode == "<="){
list_com = (list <= expected)
if(sum(list_com) != length(list_com)){
if(!silent){
cli::cli_text('Error: items of {.var {list_name}} must be smaller or equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {list}!'))
}
return(T)
}
}
return(F)
}
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "==")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "!=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "==")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "!=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = "<=")
sys.ck.list_numeric.value(list = c(1, 2, 3, 4, 5, 6),
list_name = "obj",
expected = 1, mode = ">=")
library(weather2)
library(weather2)
library(weather2)
