sys.ck.class_character = function(value, value_name, all = T, silent = F){
weather2::sys.ck.class(value = value,
value_name = value_name,
class = "character",
all = all,
silent = silent)
}
sys.ck.class_character("hi", "hi")
sys.ck.class_character(1, "hi")
class(data.frame())
class(1L)
class(T)
class(1.1)
ISOdatetime(2020, 10, 20, 20, 20, 20)
ISOdatetime(2020, 10, 20, 20, 20, 20) %>% class()
is.language()
?is.language()
library(weather2)
library(weather2)
?sys.ck.class_character
POSIXct
library(weather2)
sys.ck.class(1, "name", "numeric")
sys.ck.class_character("text", "obj")
sys.ck.class_data.frame(data.frame(), "obj")
sys.ck.class_integer(1L, "obj")
sys.ck.class_character(TRUE, "obj")
sys.ck.class_logical(TRUE, "obj")
sys.ck.class_numeric(1, "obj")
sys.ck.class_POSIXct(ISOdatetime(2023, 01, 01, 00, 00, 00), "obj")
library(weather2)
usethis::use_r("sys_check_list")
is.list("a")
is.vector("a")
sys.ck.list_length = function(list, list_name, expected, mode = "==", silent = T){
#check ####
if(!hasArg(list_name)){
cli::cli_text('Error: {.var list_name} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(list)){
cli::cli_text('Error: {.var {list_name}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(expected)){
cli::cli_text('Error: {.var {expected}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!weather2::sys.ck.class_integer(expected, value_name = "expected")){return(T)}
if(length(mode) != 1){
cli::cli_text('Error: {.var mode} must be 1 value only.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!(mode %in% c("==", "!=", ">", "<", ">=", "<="))){
cli::cli_text('Error: {.var mode} must be of a certain value.')
cli::cli_bullets(c("x" = 'You supplied {mode}!'))
return(T)
}
if(!is.logical(silent)){
silent = F
}
#actually checking ####
length_list = length(list)
return(length_list)
}
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2)
sys.ck.list_length = function(list, list_name, expected, mode = "==", silent = T){
#check ####
if(!hasArg(list_name)){
cli::cli_text('Error: {.var list_name} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(list)){
cli::cli_text('Error: {.var {list_name}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(expected)){
cli::cli_text('Error: {.var {expected}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(weather2::sys.ck.class_integer(expected, value_name = "expected")){return(T)}
if(length(mode) != 1){
cli::cli_text('Error: {.var mode} must be 1 value only.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!(mode %in% c("==", "!=", ">", "<", ">=", "<="))){
cli::cli_text('Error: {.var mode} must be of a certain value.')
cli::cli_bullets(c("x" = 'You supplied {mode}!'))
return(T)
}
if(!is.logical(silent)){
silent = F
}
#actually checking ####
length_list = length(list)
return(length_list)
}
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2)
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L)
usethis::use_r("sys_check_help")
sys.ck.list_length = function(list, list_name, expected, mode = "==", silent = T){
#check ####
if(!hasArg(list_name)){
cli::cli_text('Error: {.var list_name} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(list)){
cli::cli_text('Error: {.var {list_name}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(expected)){
cli::cli_text('Error: {.var {expected}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(weather2::sys.ck.class_integer(expected, value_name = "expected")){return(T)}
if(length(mode) != 1){
cli::cli_text('Error: {.var mode} must be 1 value only.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!(mode %in% c("==", "!=", ">", "<", ">=", "<="))){
cli::cli_text('Error: {.var mode} must be of a certain value.')
cli::cli_bullets(c("x" = 'You supplied {mode}!'))
return(T)
}
if(weather2::sys.ck.class_logical(silent, "silent")){return(T)}
#actually checking ####
length_list = length(list)
return(length_list)
}
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L)
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L, silent = 3)
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L, silent = T)
sys.ck.list_length = function(list, list_name, expected, mode = "==", silent = T){
#check ####
if(!hasArg(list_name)){
cli::cli_text('Error: {.var list_name} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(list)){
cli::cli_text('Error: {.var {list_name}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(expected)){
cli::cli_text('Error: {.var {expected}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(weather2::sys.ck.class_integer(expected, value_name = "expected")){return(T)}
if(length(mode) != 1){
cli::cli_text('Error: {.var mode} must be 1 value only.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!(mode %in% c("==", "!=", ">", "<", ">=", "<="))){
cli::cli_text('Error: {.var mode} must be of a certain value.')
cli::cli_bullets(c("x" = 'You supplied {mode}!'))
return(T)
}
if(weather2::sys.ck.class_logical(silent, "silent")){return(T)}
#actually checking ####
length_list = length(list)
if(mode == "==" & !(length_list == expected)){
cli::cli_text('Error: length of {.var {list_name}} must be equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {length_list}!'))
return(T)
}
if(mode == "!=" & !(length_list != expected)){
cli::cli_text('Error: length of {.var {list_name}} must be not equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {length_list}!'))
return(T)
}
if(mode == ">"  & !(length_list > expected)){
cli::cli_text('Error: length of {.var {list_name}} must be larger than {expected}.')
cli::cli_bullets(c("x" = 'You supplied {length_list}!'))
return(T)
}
if(mode == "<"  & !(length_list < expected)){
cli::cli_text('Error: length of {.var {list_name}} must be smaller than {expected}.')
cli::cli_bullets(c("x" = 'You supplied {length_list}!'))
return(T)
}
if(mode == ">=" & !(length_list >= expected)){
cli::cli_text('Error: length of {.var {list_name}} must be larger or equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {length_list}!'))
return(T)
}
if(mode == "<=" & !(length_list <= expected)){
cli::cli_text('Error: length of {.var {list_name}} must be smaller or equal to {expected}.')
cli::cli_bullets(c("x" = 'You supplied {length_list}!'))
return(T)
}
return(F)
}
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L, silent = T)
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L, silent = T, mode = ">=")
sys.ck.list_length(c(1, 2, 3), list_name = "hi", expected = 2L, silent = T, mode = "<=")
library(weather2)
weather2::sys.ck.class_integer()
weather2::sys.ck.list_length
weather2::sys.ck.class.integer
library(weather2)
library(weather2)
sys.ck.help_hasArg = function(value, value_name){
if(!hasArg(value)){
cli::cli_text('Error: {.var {value_name}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
}
sys.ck.help_hasArg()
sys.ck.help_hasArg = function(value, value_name){
if(!hasArg(value_name)){
cli::cli_text('Error: {.var value_name} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
if(!hasArg(value)){
cli::cli_text('Error: {.var {value_name}} must be supplied.')
cli::cli_bullets(c("x" = 'You supplied nothing!'))
return(T)
}
}
sys.ck.help_hasArg()
lol = function(x){
}
lol = function(x){
sys.ck.help_hasArg(value = x, value_name = "x")
}
lol()
lol(x = 1)
library(weather2)
library(weather2)
sys.ck.list_length(c(1,2,3), "obj", 3L)
sys.ck.list_length(c(1,2,3), "obj", 2L)
#' @examples sys.ck.list_length(c(1,2,3), , 2L)
sys.ck.list_length(c(1,2,3), , 2L)
sys.ck.list_length(c(1,2,3), "obj", 2L)
library(weather2)
?sys.ck.help_hasArg
class(T)
devtools::load_all(".")
library(weather2)
?sys.ck.list_length
library(weather2)
?sys.ck.list_length
sys.ck.list_length(c(1,2,3), "obj", 2L)
sys.ck.list_length(c(1,2,3), "obj", 2L)
library(weather2)
library(weather2)
?sys.ck.list_length
c(1, 1, "2")
library(weather2)
sys.ck.list_numericable(list = c(1, 1, "1"), list_name = "obj")
sys.ck.list_numericable(list = c(1, 1, "1"), list_name = "obj")
library(weather2)
sys.ck.list_numericable(list = c(1, 1, "1"), list_name = "obj")
sys.ck.list_numericable(list = c(1, 1, "1"), list_name = "obj")
c(1, 1, "1")
c(1, 1, "1") %>% str()
c(1, 1, "1") %>% as.numeric()
sys.ck.list_numericable(list = c(1, 1, "a"), list_name = "obj")
library(weather2)
c("a", "b", "c") %in% c("a", "b", "c", "d")
library(weather2)
?sys.ck.list_item.in
sys.ck.list_item.in(list = c(1, 2, 3), "obj", c("1", "2", "3"))
library(weather2)
sys.ck.list_item.in(c(1, 2, 3), "obj", c("1", "2", "3"))
sys.ck.list_item.in(c(1, 2, 3, 4), "obj", c("1", "2", "3"))
library(weather2)
sys.ck.list_item.in(c(1, 2, 3, 4), "obj", c("1", "2", "3"), mode = "out")
sys.ck.list_length(c(1,2,3), "obj", 2L)
sys.ck.list_item.in(c(1, 2, 3, 4), "obj", c("1", "2", "3"), mode = "out")
library(weather2)
sys.ck.list_item.in(c(1, 2, 3, 4), "obj", c("1", "2", "3"), mode = "out")
library(weather2)
sys.ck.list_length(c(1,2,3), "obj", 2L)
sys.ck.list_item.in(c(1, 2, 3, 4), "obj", c("1", "2", "3"), mode = "out")
library(weather2)
library(weather2)
sys.ck.list_has.na(c(1, 2, 3), list_name = "obj")
sys.ck.list_numericable(list = c(1, 1, "a"), list_name = "obj")
sys.ck.list_item.in(c(1, 2, 3, 4), "obj", c("1", "2", "3"), mode = "out")
sys.ck.list_length(c(1,2,3), "obj", 2L)
sys.ck.list_has.na(c(1, 2, 3), list_name = "obj")
library(weather2)
unique(c(1,1,2,3))
unique(list(1,1,2,3))
unique(list(a=c(1,2,3),1,2,3))
unique(1,2, NULL)
unique(c(1,2, NULL))
unique(c(1,2, NA))
unique(c(1,2, NA, NA_real_))
unique(c(1,2, NA_character_, NA_real_))
unique(c(1,2, NA_character_, NA_real_, 1))
unique(list(1,2, NA_character_, NA_real_, 1))
library(weather2)
sys.ck.list_item.unique(list = c(1,2,3,2), "obj", mode = "unique")
library(weather2)
sys.ck.list_item.unique(list = c(1,2,3,2), "obj", mode = "unique")
sys.ck.list_item.unique(list = c(1,2,3,2), "obj", mode = "unique")
sys.ck.list_item.unique(list = c(1,2,3,2), "obj", mode = "unique")
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "common")
library(weather2)
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "common")
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "unique")
library(weather2)
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "common")
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "unique")
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "all unique")
#' @param list_name The name of the list
#' @param mode Mode of comparison. Default as `unique`
#' * "all unique" (expecting all items are unique items in the list)
#' * "common" (expected some items are not unique items in the list)
#' @param silent Should a text message be shown if incorrect? Default as False.
#'
#' @return
#' @export
#'
#' @examples
sys.ck.list_item.unique(list = c(1,2,3), "obj", mode = "common")
library(weather2)
usethis::use_r("sys_load_file")
library(weather2)
?w2_load_help_formatdata
library(weather2)
usethis::use_r("sys_load_fileset")
library(weather2)
library(weather2)
library(weather2)
usethis::use_r("sys_check_fn")
library(weather2)
library(weather2)
library(weather2)
devtools::load_all(".")
library(weather2)
library(weather2)
sys.load_fileset()
library(weather2)
w2_check_type_character = function(value, value_name){
if(weather2::w2_check_type_help(value = value, value_name = value_name)){return(T)}
if(!is.character(value)){
cli::cli_text('Error: {.var {value_name}} must be a character')
cli::cli_bullets(c("x" = 'You supplied a {.var {class(value)}}!'))
return(T)
}
return(F)
}
library(weather2)
library(weather2)
usethis::use_r("sys_load_help")
library(weather2)
?sys.load.formatdata
??sys.load.formatdata
weather2:::sys.load.formatdata()
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
usethis::use_r("w2_check_list")
usethis::use_r("sys_check_internet")
library(weather2)
library(weather2)
library(weather2)
w2_check_int
w2_check_int
library(weather2)
library(weather2)
library(weather2)
library(weather2)
source("C:/Users/carol/Desktop/R package dev/weather2/R/w2_check_list.R", echo=TRUE)
library(weather2)
library(weather2)
usethis::use_r("sys_check_data")
rlang::as_character(xxx)
rlang::as_character(sym(xxx))
rlang::as_character(rlang::sym(xxx))
func = function(x){
print(rlang::as_character(x))
}
func(1)
func(x)
func()
func = function(x){
print(rlang::as_character(rlang::sym(x)))
}
func()
func = function(x){
rlang::as_character(x)
}
func(hi)
func("hi")
func = function(x){
rlang::as_character({{x}})
}
func("hi")
func(hi)
func = function(x){
rlang::as_character(base::as.symbol(x))
}
func(hi)
func("hi")
func = function(x = symbol){
rlang::as_character(base::as.symbol(x))
}
func("hi")
func()
func = function(x){
x = quote(x)
print(x)
}
func()
func = function(x){
x = quote(x)
print(x)
}
func()
func = function(x){
x = quote(x)
return(x)
}
func()
func() %>% str()
func = function(x){
x = quote(x)
return(x)
}
func(hi) %>% str()
func = function(x){
x = quote({x})
return(x)
}
func(hi) %>% str()
func = function(x){
x = quote({{x}})
return(x)
}
func(hi) %>% str()
func = function(x){
x = quote(!!x)
return(x)
}
func(hi) %>% str()
func = function(x){
x = quote(!!!x)
return(x)
}
func(hi) %>% str()
func = function(x){
x = quote(x)
return(x)
}
func(hi) %>% str()
func("hi") %>% str()
func = function(x){
x = rlang::as_name(x)
return(x)
}
func("hi") %>% str()
func("hi")
func(hi)
func = function(x){
x = rlang::as_name({{x}})
return(x)
}
func(hi)
func = function(x){
if(is.symbol(x)){print("fuck")}
}
func(hi)
func(x = hi)
func(x = "hi")
func(x = quote("hi"))
func = function(x){
if(rlang::is_symbol(x)){print("fuck")}
}
func(x = quote("hi"))
func(x = hi)
func = function(x){
expr = quo_squash(x)
if(rlang::is_symbol(x)){print("fuck")}
}
func(x = hi)
?quo_squash
func = function(x){
expr = rlang::quo_squash(x)
if(rlang::is_symbol(x)){print("fuck")}
}
func(x = hi)
func = function(x){
expr = rlang::quo_squash(x)
print(expr)
}
func(x = hi)
