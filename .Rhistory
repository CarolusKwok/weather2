...)
data1 = tibble::tibble(sp = NA, st = NA, isohume = NA, .rows = 0)
#List out the grouping & Do the magic
list_grp = dplyr::select(data0, x = {{name_label}})$x %>% unique()
for(i in list_grp){
data_cal = dplyr::filter(data0,
!!rlang::sym({{name_label}}) == i) %>%
magic()
data1 = dplyr::bind_rows(data1, data_cal)
}
#Return the data ####
data = weather2::sys_tld_FormatReturn(data,
name_as = name_as,
value = list(data1$sp,
data1$st,
data1$isohume),
overwrite = overwrite) %>%
dplyr::select(-{{name_label}})
return(data)
}
calc_ccl_est(data, pres, temp, dwpt) %>% View()
data = weather2::load_asnd(time = c(Sys.time(), Sys.time()-10000))
calc_ccl_est(data, pres, temp, dwpt) %>% View()
calc_ccl_est(data, pres, temp, dwpt, time) %>% View()
calc_ccl_est(data, pres, temp, dwpt, time, station) %>% View()
#' @param temp The column name of the initial temperature of the calculation. Unit in `degC`.
#' @param dwpt The column name of the initial dewpoint of the calculation. Unit in `degC`.
#' @param ... The column name of grouping of data
#' @param name_as Names of the 3 new columns, in the order of "pressure of the LCL", "temperature of the LCL(estimated by temperature)", and "temperature of the LCL(estimated by dewpoint)". Default as `c("lclp", "lclt_t", "lclt_d")`.
#' @param overwrite Let the new column names to overwrite the original dataframe columns? Default as `FALSE`.
#'
#' @return
#' @export
#'
#' @examples load_asnd(time = Sys.time() - 4000) %>% calc_ccl_est(pres, temp, dwpt, station, time)
calc_ccl_est = function(data, pres, temp, dwpt, ..., name_as = c("cclp", "cclt", "cclh"), overwrite = F){
#Preset function  ####
magic = function(data0){
#Smooth the dataframe
data1 = tibble::tibble(p = seq(max(data0$p, na.rm = T), min(data0$p, na.rm = T), -1),
t = NA) %>%
dplyr::filter(!(p %in% data0$p)) %>%
dplyr::bind_rows(dplyr::select(data0, p, t)) %>%
dplyr::arrange(p) %>%
weather2::calc_smooth_lm(based = p,
value = t,
trailing = F,
name_as = "st",
overwrite = T) %>%
dplyr::select(sp = p, st) %>%
dplyr::filter((sp %% 1) == 0)
#Calculate the CCL
data2 =  tidyr::expand_grid(data0, data1) %>%
dplyr::mutate(sp = ifelse(t == d, p, sp),
st = ifelse(t == d, t, st),
t = NULL) %>%
dplyr::distinct() %>%
weather2::calc_isohume(pres1 = p, temp1 = d, pres2 = sp,
name_as = "isohume",
overwrite = T) %>%
dplyr::mutate(diff = isohume - st,
sign = sign(diff),
diff = abs(diff)) %>%
weather2::sys_tld_GrpByAltVal(sign, name_as = "grp", overwrite = T) %>%
dplyr::group_by(p, grp) %>%
dplyr::filter(diff == suppressWarnings(min(diff, na.rm = T)) | is.na(diff)) %>%
dplyr::group_by(p) %>%
dplyr::mutate(nrow = dplyr::n(),
rm = (nrow == 1 & sp != p)) %>%
dplyr::filter(diff == suppressWarnings(min(diff, na.rm = T)) | is.na(diff)) %>%
dplyr::mutate(sp = ifelse(rm, NA, sp),
st = ifelse(rm, NA, st),
isohume = ifelse(rm, NA, isohume)) %>%
dplyr::ungroup() %>%
dplyr::select(sp, st, isohume)
return(data2)
}
#Check ####
if(weather2:::sys_hp_hasArg(data, 'data')){return(data)}
if(weather2:::sys_hp_hasArg(pres, 'pres')){return(data)}
if(weather2:::sys_hp_hasArg(temp, 'temp')){return(data)}
if(weather2:::sys_hp_hasArg(dwpt, 'dwpt')){return(data)}
if(weather2::sys_ckc_dataframe(data, 'data')){return(data)}
if(weather2::sys_ckd_colexist({{pres}}, "pres", data = data, data_name = "data")){return(data)}
if(weather2::sys_ckd_colexist({{temp}}, "temp", data = data, data_name = "data")){return(data)}
if(weather2::sys_ckd_colexist({{dwpt}}, "dwpt", data = data, data_name = "data")){return(data)}
mc = match.call(expand.dots = FALSE)$...
for(i in mc){
if(weather2::sys_ckd_colexist({{i}}, value_name = "...", data = data, data_name = "data")){return(data)}
}
if(weather2::sys_ckl_length(name_as, list_name = "name_as", expected = 3L)){return(data)}
if(weather2::sys_ckc_character(name_as, value_name = "name_as")){return(data)}
if(weather2::sys_ckc_logical(overwrite, value_name = "overwrite")){return(data)}
#Make the original data as data0 ####
name_p = weather2::sys_tld_GetColname("p", data)
name_t = weather2::sys_tld_GetColname("t", data)
name_d = weather2::sys_tld_GetColname("d", data)
name_label = weather2::sys_tld_GetColname("label", data)
data = weather2::sys_tld_MultiColumnLabel(data = data, ...,
name_as = {{name_label}}, overwrite = T) %>%
dplyr::arrange({{name_label}})
data0 = dplyr::select(data,
"{name_label}" := !!rlang::sym({{name_label}}),
"{name_p}" := {{pres}},
"{name_t}" := {{temp}},
"{name_d}" := {{dwpt}},
...)
data1 = tibble::tibble(sp = NA, st = NA, isohume = NA, .rows = 0)
#List out the grouping & Do the magic
list_grp = dplyr::select(data0, x = {{name_label}})$x %>% unique() %>%
View()
for(i in list_grp){
data_cal = dplyr::filter(data0,
!!rlang::sym({{name_label}}) == i) %>%
magic()
data1 = dplyr::bind_rows(data1, data_cal)
}
#Return the data ####
data = weather2::sys_tld_FormatReturn(data,
name_as = name_as,
value = list(data1$sp,
data1$st,
data1$isohume),
overwrite = overwrite) %>%
dplyr::select(-{{name_label}})
return(data)
}
data = weather2::load_asnd(time = c(Sys.time(), Sys.time()-10000))
calc_ccl_est(data, pres, temp, dwpt, time, station) %>% View()
#' @param temp The column name of the initial temperature of the calculation. Unit in `degC`.
#' @param dwpt The column name of the initial dewpoint of the calculation. Unit in `degC`.
#' @param ... The column name of grouping of data
#' @param name_as Names of the 3 new columns, in the order of "pressure of the LCL", "temperature of the LCL(estimated by temperature)", and "temperature of the LCL(estimated by dewpoint)". Default as `c("lclp", "lclt_t", "lclt_d")`.
#' @param overwrite Let the new column names to overwrite the original dataframe columns? Default as `FALSE`.
#'
#' @return
#' @export
#'
#' @examples load_asnd(time = Sys.time() - 4000) %>% calc_ccl_est(pres, temp, dwpt, station, time)
calc_ccl_est = function(data, pres, temp, dwpt, ..., name_as = c("cclp", "cclt", "cclh"), overwrite = F){
#Preset function  ####
magic = function(data0){
#Smooth the dataframe
data1 = tibble::tibble(p = seq(max(data0$p, na.rm = T), min(data0$p, na.rm = T), -1),
t = NA) %>%
dplyr::filter(!(p %in% data0$p)) %>%
dplyr::bind_rows(dplyr::select(data0, p, t)) %>%
dplyr::arrange(p) %>%
weather2::calc_smooth_lm(based = p,
value = t,
trailing = F,
name_as = "st",
overwrite = T) %>%
dplyr::select(sp = p, st) %>%
dplyr::filter((sp %% 1) == 0)
#Calculate the CCL
data2 =  tidyr::expand_grid(data0, data1) %>%
dplyr::mutate(sp = ifelse(t == d, p, sp),
st = ifelse(t == d, t, st),
t = NULL) %>%
dplyr::distinct() %>%
weather2::calc_isohume(pres1 = p, temp1 = d, pres2 = sp,
name_as = "isohume",
overwrite = T) %>%
dplyr::mutate(diff = isohume - st,
sign = sign(diff),
diff = abs(diff)) %>%
weather2::sys_tld_GrpByAltVal(sign, name_as = "grp", overwrite = T) %>%
dplyr::group_by(p, grp) %>%
dplyr::filter(diff == suppressWarnings(min(diff, na.rm = T)) | is.na(diff)) %>%
dplyr::group_by(p) %>%
dplyr::mutate(nrow = dplyr::n(),
rm = (nrow == 1 & sp != p)) %>%
dplyr::filter(diff == suppressWarnings(min(diff, na.rm = T)) | is.na(diff)) %>%
dplyr::mutate(sp = ifelse(rm, NA, sp),
st = ifelse(rm, NA, st),
isohume = ifelse(rm, NA, isohume)) %>%
dplyr::ungroup() %>%
dplyr::select(sp, st, isohume)
return(data2)
}
#Check ####
if(weather2:::sys_hp_hasArg(data, 'data')){return(data)}
if(weather2:::sys_hp_hasArg(pres, 'pres')){return(data)}
if(weather2:::sys_hp_hasArg(temp, 'temp')){return(data)}
if(weather2:::sys_hp_hasArg(dwpt, 'dwpt')){return(data)}
if(weather2::sys_ckc_dataframe(data, 'data')){return(data)}
if(weather2::sys_ckd_colexist({{pres}}, "pres", data = data, data_name = "data")){return(data)}
if(weather2::sys_ckd_colexist({{temp}}, "temp", data = data, data_name = "data")){return(data)}
if(weather2::sys_ckd_colexist({{dwpt}}, "dwpt", data = data, data_name = "data")){return(data)}
mc = match.call(expand.dots = FALSE)$...
for(i in mc){
if(weather2::sys_ckd_colexist({{i}}, value_name = "...", data = data, data_name = "data")){return(data)}
}
if(weather2::sys_ckl_length(name_as, list_name = "name_as", expected = 3L)){return(data)}
if(weather2::sys_ckc_character(name_as, value_name = "name_as")){return(data)}
if(weather2::sys_ckc_logical(overwrite, value_name = "overwrite")){return(data)}
#Make the original data as data0 ####
name_p = weather2::sys_tld_GetColname("p", data)
name_t = weather2::sys_tld_GetColname("t", data)
name_d = weather2::sys_tld_GetColname("d", data)
name_label = weather2::sys_tld_GetColname("label", data)
data = weather2::sys_tld_MultiColumnLabel(data = data, ...,
name_as = {{name_label}}, overwrite = T) %>%
dplyr::arrange({{name_label}})
data0 = dplyr::select(data,
"{name_label}" := !!rlang::sym({{name_label}}),
"{name_p}" := {{pres}},
"{name_t}" := {{temp}},
"{name_d}" := {{dwpt}},
...)
data1 = tibble::tibble(sp = NA, st = NA, isohume = NA, .rows = 0)
#List out the grouping & Do the magic
list_grp = dplyr::select(data0, x = {{name_label}})$x %>% unique() %>%
weather2:::sys_hp_review()
for(i in list_grp){
data_cal = dplyr::filter(data0,
!!rlang::sym({{name_label}}) == i) %>%
magic()
data1 = dplyr::bind_rows(data1, data_cal)
}
#Return the data ####
data = weather2::sys_tld_FormatReturn(data,
name_as = name_as,
value = list(data1$sp,
data1$st,
data1$isohume),
overwrite = overwrite) %>%
dplyr::select(-{{name_label}})
return(data)
}
#data = weather2::load_asnd(time = c(Sys.time(), Sys.time()-10000))
calc_ccl_est(data, pres, temp, dwpt, time, station) %>% View()
data = weather2::load_asnd(time = c(Sys.time(), Sys.time()-10000000000))
Sys.time()-10000000000
Sys.time()-100000
data = weather2::load_asnd(time = c(Sys.time(), Sys.time()-100000))
calc_ccl_est(data, pres, temp, dwpt, time, station) %>% View()
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
usethis::use_r("calc_parcel")
library(weather2)
weather2::load_asnd() %>% dplyr::slice(1) %>% dplyr::mutate(pres2 = 200) %>% weather2::calc_parcel(pres, temp, dwpt, pres2)
library(weather2)
usethis::use_r("sys_load_line")
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
?load_uw_asnd
library(weather2)
library(weather2)
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
library(weather2)
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
stringr::str_split("fsalfjla fsafaflk faskjfljaf", " ")
stringr::str_split("fsalfjla fsafaflk faskjfljaf", " ") %>% unlist()
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
library(weather2)
library()
install.packages("furrr")
install.packages("future")
install.packages("ggplot2")
install.packages("ggrepel")
install.packages("tidyr")
library(weather2)
library(weather2)
library(weather2)
load_uw_asnd()
library(weather2)
load_uw_asnd()
library(weather2)
library(weather2)
load_uw_asnd()
load_uw_asnd(weather2::tool_datetime(end = Sys.time(), duration = "2 days", by = "12 hours"))
load_uw_asnd(weather2::tool_datetime(end = Sys.time(), duration = "2 days", by = "12 hours")) %>% View()
library(weather2)
load_uw_asnd(weather2::tool_datetime(end = Sys.time(), duration = "2 days", by = "12 hours")) %>% View()
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
sys_load_panelstart("test", Sys.time(), "1", "n", 999)
weather2:::sys_load_panelstart("test", Sys.time(), "1", "n", 999)
weather2:::sys_load_panelstart(Sys.time(), Sys.time(), 999, 0, 9, TRUE, rep("fail", 9))
weather2:::sys_load_panelstart(Sys.time(), Sys.time(), 999, 0, 9, TRUE)
weather2:::sys_load_panelend(Sys.time(), Sys.time(), 999, 0, 9, TRUE, "fail")
library(weather2)
weather2:::sys_ldhp_panelend(Sys.time(), Sys.time(), 999, 0, 9, TRUE, "fail")
weather2:::sys_ldhp_panelend(Sys.time(), Sys.time(), 999, 0, 9, TRUE, "fail")
sys_ldhp_panelend(Sys.time(), Sys.time(), 999, 0, 9, TRUE, "fail")
weather2:::sys_ldhp_panelend(Sys.time(), Sys.time(), 999, 0, 9, TRUE, "fail")
weather2:::sys_ldhp_panelend(Sys.time(), Sys.time(), 999, 0, 9, TRUE, "fail")
weather2:::sys_ldhp_panelstart("test", Sys.time(), "1", "n", 999)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
nchar("download start")
nchar("close download process")
?sapply
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
sys_ckf_SysLoadFileset(data, "title", 5L, 20L, TRUE, 1)
library(weather2)
library(weather2)
??weather2hk::load_ltng
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
?sys_tld_for
?sys_tld_FormatReturn
library(weather2)
?@retrun
library(weather2)
?sys_ckf_NameAsReturn
library(weather2)
library(weather2)
library(weather2)
?calc_lcl_est
library(weather2)
library(weather2)
calc_lcl(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
library(weather2)
calc_lcl(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
library(weather2)
calc_lcl(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
calc_lcl(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
calc_lcl_est(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
library(weather2)
calc_lcl_est(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt) #Should return 861 for pressure
calc_lcl_est(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt) #Should return 861 for pressure
library(weather2)
calc_lcl_est(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt) #Should return 861 for pressure
library(weather2)
calc_lcl_est(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt) #Should return 861 for pressure
library(weather2)
calc_lcl_est(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt) #Should return 861 for pressure
calc_lcl(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
library(weather2)
calc_lcl(tibble::tibble(pres = 1000, temp = 20, dwpt = 10), pres, temp, dwpt)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
weather2::const("standard acceleration of gravity", 9.80665, "m s^-2")
weather2:::const("standard acceleration of gravity", 9.80665, "m s^-2")
library(weather2)
coord_radar
coord_radar()
library(weather2)
library(weather2)
library(weather2)
library(weather2)
file_info(c("1.csv", "2.csv", "3.csv"))
file_info(c("1.csv", "2.csv", "3.csv"))
file_info(c("1.csv", "2.csv", "3.csv")) %>% str()
file_info(c("1.csv", "2.csv", "3.csv")) %>% class()
?file.info
library(weather2)
file_info(c("1.csv", "2.csv", "3.csv"))
library(weather2)
file_info(c("1.csv", "2.csv", "3.csv"))
library(weather2)
?file_info
library(weather2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
library(weather2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
weather2:::sys_hp_sym2chr(lon)
data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100))
library(weather2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
library(weather2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
library(weather2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)),
lon1, lat1, brn1, dis)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)),
lon1, lat1, brn1, dis)
library(weather2)
library(weather2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)),
lon1, lat1, brn1, dis)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)),
lon1, lat1, brn1, dis, name_as = c("lon2", "lat2", "brn2", "*del*"))
library(weather2)
calc_geo_dist(data = tibble::tibble(lon1 = 1:90, lat1 = 1:90, lon2 = 90:1, lat2 = 90:1), lon1, lat1, lon2, lat2)
library(weather2)
calc_geo_dist(data = tibble::tibble(lon1 = 1:90, lat1 = 1:90, lon2 = 90:1, lat2 = 90:1), lon1, lat1, lon2, lat2)
calc_geo_dest(data = data.frame(lon1 = 1:200, lat1 = 1:200, brn1 = 1:200, dis = seq(1100, 21000, 100)), lon1, lat1, brn1, dis)
calc_geo_dist(data = tibble::tibble(lon1 = 1:90, lat1 = 1:90, lon2 = 90:1, lat2 = 90:1), lon1, lat1, lon2, lat2)
library(weather2)
library(weather2)
?dplyr::lag
?as.duration
library(weather2)
calc_time_int(data.frame(time = as.POSIXct("2023/01/01 00:00:00", "2022/12/01 00:00:00", "2022/11/01 00:00:00")), time)
data.frame(time = as.POSIXct("2023/01/01 00:00:00", "2022/12/01 00:00:00", "2022/11/01 00:00:00"))
data.frame(time = as.POSIXct(c("2023/01/01 00:00:00", "2022/12/01 00:00:00", "2022/11/01 00:00:00")))
data.frame(time = as.POSIXct(c("2023/01/01 00:00:00", "2022/12/01 00:00:00", "2022/11/01 00:00:00")))
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00")))
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int()
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
library(weather2)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
library(weather2)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
library(weather2)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
library(weather2)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
library(weather2)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
library(weather2)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time)
data.frame(time = as.POSIXct(c("2023/01/01 12:00:00", "2022/12/01 12:00:00", "2022/11/01 12:00:00"))) %>% calc_time_int(time, type = "after")
library(weather2)
?calc_time_int
library(weather2)
?calc_time_int
library(weather2)
weather2::load_asnd() %>% dplyr::slice(1) %>% dplyr::mutate(pres2 = 200) %>% weather2::calc_parcel(pres, temp, dwpt, pres2)
library(magrittr)
weather2::load_asnd() %>% dplyr::slice(1) %>% dplyr::mutate(pres2 = 200) %>% weather2::calc_parcel(pres, temp, dwpt, pres2)
weather2::load_uw_asnd() %>% dplyr::slice(1) %>% dplyr::mutate(pres2 = 200) %>% weather2::calc_parcel(pres, temp, dwpt, pres2)
library(weather2)
weather2::load_uw_asnd() %>% dplyr::slice(1) %>% dplyr::mutate(pres2 = 200) %>% weather2::calc_parcel(pres, temp, dwpt, pres2)
weather2::load_uw_asnd() %>%
dplyr::slice(1) %>%
dplyr::select(pres, temp, dwpt)
dplyr::mutate(pres2 = 200) %>%
weather2::calc_parcel(pres, temp, dwpt, pres2)
weather2::load_uw_asnd() %>%
dplyr::slice(1) %>%
dplyr::select(pres, temp, dwpt) %>%
dplyr::mutate(pres2 = 200) %>%
weather2::calc_parcel(pres, temp, dwpt, pres2)
library(weather2)
library(weather2)
dplyr::is.grouped_df(tea)
dplyr::is.grouped_df(data(tea))
data(tea)
data(iris)
dplyr::is.grouped_df(iris)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
usethis::use_package("hi")
install.packages("devtools")
usethis::use_package("XML")
library(weather2)
library(weather2)
library(weather2)
tool_asnd_dict
??tool_asnd_dict
tool_asnd_dict()
209.64
44
Equilibrum Level
library(weather2)
usethis::use_r("load_uw_asnd_metr")
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
library(weather2)
